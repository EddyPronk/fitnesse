!3 !-!contents-! with Recursive, Graceful, and Property options
'''You can add the -R option to the [[!-!contents-!][TestContents]] widget to get a recursive,  hierarchical view of all the descendents of the current page.  The -g options regraces or space-ifies the current TOC only.  The REGRACE_TOC will set graceful TOC display for all child pages.'''
{{{Example:  !contents -R -g -p
  Options
    -R   ...include all of the descendent pages
    -g   ...show graceful names in the list--define REGRACE_TOC {true} for global;
    -p   ...show property suffixes--define PROPERTY_TOC {true} for global;
              defaults:  Suite(*), Test(+), Imported(@), Symbolic(>)
              define PROPERTY_CHARACTERS {*+@>} to change.}}}
!3 Explicit -R -g -p Options
'''First create the parent page.'''
|Action Fixture.|
|start|Page Builder|
|enter|line|I'm the parent|
|enter|line|!-!contents-! -R -g -p|
|enter|page|!-ParentPage-!|

!include -seamless ContentsTestsInclude
'''Next create a grandchild'''
|Action Fixture.|
|start|Page Builder|
|enter|line|You're too young to be grandparents|
|enter|page|!-ParentPage.FirstChild.GrandChild-!|

'''Then request the parent page.'''
|Response Requester.|
|uri|valid?|contents?|
|!-ParentPage-!|true||

'''...and examine the requested page to be sure that the descendent pages are included'''
!|Response Examiner.|
|type|pattern|matches?|
|contents|<a href="ParentPage.FirstChild">First Child \*\+</a>|true|
|contents|<a href="ParentPage.FirstChild.GrandChild">Grand Child</a>|true|
|contents|<a href="ParentPage.SecondChild">Second Child @</a>|true|

'''Also note that the html assigns css classes named toc1, toc2, etc depending on how far down you go. This allows you to define different characteristics for each level in the hierarchy by editing /files/css/fitnesse.css.'''
!|Response Examiner.|
|type|pattern|matches?|
|contents|<div class="toc1">|true|
|contents|<div class="toc2">|true|

!3 Implicit Regracing and Properties via REGRACE_TOC and PROPERTY_TOC respectively
|Action Fixture.|
|start|Page Builder|
|enter|line|I'm the parent|
|enter|line|!-!define REGRACE_TOC {true}-!|
|enter|line|!-!define PROPERTY_TOC {true}-!|
|enter|line|!-!contents-! -R|
|enter|line|!-!define REGRACE_TOC {false}-!|
|enter|line|!-!define PROPERTY_TOC {false}-!|
|enter|page|!-ParentPage-!|

!include -seamless ContentsTestsInclude
'''Next create a grandchild'''
|Action Fixture.|
|start|Page Builder|
|enter|line|You're too young to be grandparents|
|enter|page|!-ParentPage.FirstChild.GrandChild-!|

'''Then request the parent page.'''
|Response Requester.|
|uri|valid?|contents?|
|!-ParentPage-!|true||

'''...and examine the requested page to be sure that the descendent pages are included'''
!|Response Examiner.|
|type|pattern|matches?|
|contents|<a href="ParentPage.FirstChild">First Child \*\+</a>|true|
|contents|<a href="ParentPage.FirstChild.GrandChild">Grand Child</a>|true|
|contents|<a href="ParentPage.SecondChild">Second Child @</a>|true|

'''Also note that the html assigns css classes named toc1, toc2, etc depending on how far down you go. This allows you to define different characteristics for each level in the hierarchy by editing /files/css/fitnesse.css.'''
!|Response Examiner.|
|type|pattern|matches?|
|contents|<div class="toc1">|true|
|contents|<div class="toc2">|true|

